// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metrics.proto

package metrics

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type MetricRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricRequest) Reset()         { *m = MetricRequest{} }
func (m *MetricRequest) String() string { return proto.CompactTextString(m) }
func (*MetricRequest) ProtoMessage()    {}
func (*MetricRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{0}
}

func (m *MetricRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricRequest.Unmarshal(m, b)
}
func (m *MetricRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricRequest.Marshal(b, m, deterministic)
}
func (m *MetricRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricRequest.Merge(m, src)
}
func (m *MetricRequest) XXX_Size() int {
	return xxx_messageInfo_MetricRequest.Size(m)
}
func (m *MetricRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetricRequest proto.InternalMessageInfo

func (m *MetricRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type MetricReply struct {
	Metric               []float64 `protobuf:"fixed64,1,rep,packed,name=metric,proto3" json:"metric,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MetricReply) Reset()         { *m = MetricReply{} }
func (m *MetricReply) String() string { return proto.CompactTextString(m) }
func (*MetricReply) ProtoMessage()    {}
func (*MetricReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{1}
}

func (m *MetricReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricReply.Unmarshal(m, b)
}
func (m *MetricReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricReply.Marshal(b, m, deterministic)
}
func (m *MetricReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricReply.Merge(m, src)
}
func (m *MetricReply) XXX_Size() int {
	return xxx_messageInfo_MetricReply.Size(m)
}
func (m *MetricReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricReply.DiscardUnknown(m)
}

var xxx_messageInfo_MetricReply proto.InternalMessageInfo

func (m *MetricReply) GetMetric() []float64 {
	if m != nil {
		return m.Metric
	}
	return nil
}

func init() {
	proto.RegisterType((*MetricRequest)(nil), "metrics.MetricRequest")
	proto.RegisterType((*MetricReply)(nil), "metrics.MetricReply")
}

func init() { proto.RegisterFile("metrics.proto", fileDescriptor_6039342a2ba47b72) }

var fileDescriptor_6039342a2ba47b72 = []byte{
	// 133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4d, 0x2d, 0x29,
	0xca, 0x4c, 0x2e, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x94, 0xb9,
	0x78, 0x7d, 0xc1, 0xcc, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x21, 0x2e, 0x96, 0xbc,
	0xc4, 0xdc, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b, 0x49, 0x95, 0x8b, 0x1b,
	0xa6, 0xa8, 0x20, 0xa7, 0x52, 0x48, 0x8c, 0x8b, 0x0d, 0xa2, 0x5d, 0x82, 0x51, 0x81, 0x59, 0x83,
	0x31, 0x08, 0xca, 0x33, 0xf2, 0xe6, 0x62, 0x87, 0x28, 0x2b, 0x16, 0x72, 0xe0, 0xe2, 0x83, 0x1a,
	0x08, 0x13, 0x11, 0xd3, 0x83, 0xb9, 0x00, 0xc5, 0x3e, 0x29, 0x11, 0x0c, 0xf1, 0x82, 0x9c, 0x4a,
	0x25, 0x86, 0x24, 0x36, 0xb0, 0x43, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x5c, 0xeb,
	0x12, 0xb9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MetricsClient is the client API for Metrics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetricsClient interface {
	// Get metrics
	RequestMetrics(ctx context.Context, in *MetricRequest, opts ...grpc.CallOption) (*MetricReply, error)
}

type metricsClient struct {
	cc *grpc.ClientConn
}

func NewMetricsClient(cc *grpc.ClientConn) MetricsClient {
	return &metricsClient{cc}
}

func (c *metricsClient) RequestMetrics(ctx context.Context, in *MetricRequest, opts ...grpc.CallOption) (*MetricReply, error) {
	out := new(MetricReply)
	err := c.cc.Invoke(ctx, "/metrics.Metrics/RequestMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsServer is the server API for Metrics service.
type MetricsServer interface {
	// Get metrics
	RequestMetrics(context.Context, *MetricRequest) (*MetricReply, error)
}

// UnimplementedMetricsServer can be embedded to have forward compatible implementations.
type UnimplementedMetricsServer struct {
}

func (*UnimplementedMetricsServer) RequestMetrics(ctx context.Context, req *MetricRequest) (*MetricReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestMetrics not implemented")
}

func RegisterMetricsServer(s *grpc.Server, srv MetricsServer) {
	s.RegisterService(&_Metrics_serviceDesc, srv)
}

func _Metrics_RequestMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).RequestMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics.Metrics/RequestMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).RequestMetrics(ctx, req.(*MetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Metrics_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metrics.Metrics",
	HandlerType: (*MetricsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestMetrics",
			Handler:    _Metrics_RequestMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metrics.proto",
}
